// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organization {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  ghanaPostGPS   String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  phoneNumber    String   @unique
  email          String   @unique
  organizationId String   @unique @default(uuid())
  users          User[]
  branches       Branch[]
  Member         Member[]

  @@map("organizations")
}

model Role {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      Roles     @unique()
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  roleId    String    @unique @default(uuid())

  @@map("roles")
}

enum BranchType {
  HEAD_OFFICE
  SUB
}

model Branch {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  branchId String @unique @default(uuid())

  type         BranchType
  ghanaPostGPS String     @unique
  phoneNumber  String?

  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  Organization   Organization? @relation(fields: [organizationId], references: [organizationId])
  organizationId String?

  @@map("branches")
}

enum Roles {
  SUPER_ADMIN
  BACKOFFICE_ADMIN
  MEMBER
  TRAINER
}

enum RenewalPeriods {
  WEEKLY
  MONTHLY
  QUARTERLY
  BI_ANNUALLY
  ANNUALLY
}

model SubscriptionPackages {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  subscriptionId String @unique @default(uuid())

  name          String
  amount        Float
  createdBy     String
  description   String?
  // Member    Member[]
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  renewalPeriod String

  @@map("subscription_packages")
}

model Member {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  memberId String @unique @default(uuid())

  foreNames   String
  lastName    String
  phoneNumber String
  idNumber    String
  createdBy   String  @db.ObjectId
  updatedBy   String?

  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  user           User         @relation(fields: [createdBy], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [organizationId])
  organizationId String

  @@unique([organizationId, phoneNumber,idNumber])
  @@index([createdBy, organizationId, memberId, phoneNumber])
  @@map("members")
}

model User {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @default(uuid()) @unique
  email       String @unique
  phoneNumber String
  hash        String
  foreNames   String
  lastName    String

  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [organizationId])
  organizationId String?
  Member         Member[]

  @@map("users")
}
