// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum BranchType {
  HEAD_OFFICE
  SUB
}

enum Roles {
  SUPER_ADMIN
  BACKOFFICE_ADMIN
  MEMBER
  TRAINER
}

enum RenewalPeriods {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  BI_ANNUALLY
  ANNUALLY
}

model Organization {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  ghanaPostGPS         String                @unique
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now())
  phoneNumber          String                @unique
  email                String                @unique
  organizationId       String                @unique @default(uuid())
  users                User[]
  branches             Branch[]
  members              Member[]
  subscriptionPackages SubscriptionPackage[]

  @@map("organizations")
}

model Role {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      Roles     @unique()
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  roleId    String    @unique @default(uuid())

  @@map("roles")
}

model Branch {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  branchId String @unique @default(uuid())

  type         BranchType
  ghanaPostGPS String     @unique
  phoneNumber  String?

  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  Organization   Organization? @relation(fields: [organizationId], references: [organizationId])
  organizationId String?

  @@map("branches")
}

model User {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @unique @default(uuid())
  email       String @unique
  phoneNumber String
  hash        String
  foreNames   String
  lastName    String

  createdAt       DateTime              @default(now())
  updatedAt       DateTime?             @updatedAt
  organization    Organization?         @relation(fields: [organizationId], references: [organizationId])
  organizationId  String?
  packagesCreated SubscriptionPackage[] @relation("createdPackages")
  packagesUpdated SubscriptionPackage[] @relation("updatedPackages")

  membersCreated Member[]       @relation("createdMembers")
  membersUpdated Member[]       @relation("updatedMembers")
  Subscription   Subscription[]

  @@map("users")
}

model SubscriptionPackage {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  packageId String @unique @default(uuid())

  name          String
  amount        Float
  createdByUser User   @relation("createdPackages", fields: [createdByUserId], references: [userId])
  updatedByUser User?  @relation("updatedPackages", fields: [updatedByUserId], references: [userId])

  description     String?
  deactivedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt
  renewalPeriod   String
  organization    Organization   @relation(fields: [organizationId], references: [organizationId])
  organizationId  String
  subscriptions   Subscription[]
  createdByUserId String
  updatedByUserId String?

  @@map("subscription_packages")
}

model Subscription {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  subscriptionId String              @unique @default(uuid())
  member         Member              @relation(fields: [memberId], references: [id])
  memberId       String              @db.ObjectId
  package        SubscriptionPackage @relation(fields: [packageId], references: [id])
  packageId      String              @db.ObjectId
  createdAt      DateTime            @default(now())
  expiresAt      DateTime
  createdBy      String?
  createdByUser  User?               @relation(fields: [createdBy], references: [userId])

  @@map("subscriptions")
}

model Member {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  memberId String @unique @default(uuid())

  foreNames       String
  lastName        String
  phoneNumber     String
  idNumber        String
  createdByUserId String
  updatedByUserId String?

  createdByUser User  @relation("createdMembers", fields: [createdByUserId], references: [userId])
  updatedByUser User? @relation("updatedMembers", fields: [updatedByUserId], references: [userId])

  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt
  organization   Organization   @relation(fields: [organizationId], references: [organizationId])
  organizationId String
  subscriptions  Subscription[]

  @@unique([organizationId, phoneNumber, idNumber])
  @@index([createdByUserId, organizationId, memberId, phoneNumber])
  @@map("members")
}
